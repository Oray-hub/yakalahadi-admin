const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

// SendGrid email fonksiyonunu import et
const { sendCompanyApprovalEmail } = require('./sendGridEmail');

// Toplu bildirim fonksiyonunu import et
const { sendBulkNotificationTrigger } = require('./bulkNotification');

// Firma onay bildirimi fonksiyonunu import et
const { sendCompanyApprovalNoticeTrigger } = require('./companyApproval');

// Export the functions
exports.sendCompanyApprovalEmail = sendCompanyApprovalEmail;
exports.sendBulkNotificationTrigger = sendBulkNotificationTrigger;
exports.sendCompanyApprovalNoticeTrigger = sendCompanyApprovalNoticeTrigger;

// üéØ Yeni kampanya bildirimi fonksiyonu - Flutter y√∂nlendirme sistemine uygun
exports.sendNewCampaignNotice = functions
  .region('europe-west1')
  .runWith({
    minInstances: 0,
    maxInstances: 3000
  })
  .firestore
  .document('campaigns/{campaignId}')
  .onCreate(async (snap, context) => {
    try {
      const campaignData = snap.data();
      const campaignId = context.params.campaignId;
      
      console.log(`üéØ Yeni kampanya olu≈üturuldu: ${campaignId}`);
      
      // T√ºm kullanƒ±cƒ±larƒ± al
      const usersSnapshot = await admin.firestore().collection('users').get();
      
      if (usersSnapshot.empty) {
        console.log('‚ùå Kullanƒ±cƒ± bulunamadƒ±');
        return null;
      }
      
      const campaignTitle = campaignData.title || campaignData.campaignTitle || "Yeni Kampanya";
      const campaignDescription = campaignData.description || campaignData.campaignDescription || "Yeni bir kampanya ba≈üladƒ±!";
      
      // FCM mesajƒ±nƒ± hazƒ±rla - Flutter main dosyasƒ±ndaki y√∂nlendirme sistemine uygun
      const message = {
        notification: {
          title: `üéØ ${campaignTitle}`,
          body: campaignDescription,
        },
        data: {
          type: "yakala", // ‚úÖ Flutter main dosyasƒ±ndaki y√∂nlendirme sistemine uygun
          campaignId: campaignId,
          campaignTitle: campaignTitle,
          timestamp: new Date().toISOString(),
          click_action: "FLUTTER_NOTIFICATION_CLICK",
          screen: "yakala_hadi_campaigns_screen"
        },
        topic: 'all_users' // T√ºm kullanƒ±cƒ±lara g√∂nder
      };
      
      // Bildirimi g√∂nder
      const result = await admin.messaging().send(message);
      
      console.log(`üì® Yeni kampanya bildirimi g√∂nderildi:`, result);
      
      return result;
      
    } catch (error) {
      console.error("‚ùå Yeni kampanya bildirimi g√∂nderilirken hata:", error);
      return null;
    }
  });

// üéÅ Yeni indirim bildirimi fonksiyonu - Flutter y√∂nlendirme sistemine uygun
exports.sendNewDiscountNotice = functions
  .region('europe-west1')
  .runWith({
    minInstances: 0,
    maxInstances: 3000
  })
  .firestore
  .document('discounts/{discountId}')
  .onCreate(async (snap, context) => {
    try {
      const discountData = snap.data();
      const discountId = context.params.discountId;
      
      console.log(`üéÅ Yeni indirim olu≈üturuldu: ${discountId}`);
      
      const discountTitle = discountData.title || discountData.discountTitle || "Yeni ƒ∞ndirim";
      const discountDescription = discountData.description || discountData.discountDescription || "Yeni bir indirim ba≈üladƒ±!";
      
      // FCM mesajƒ±nƒ± hazƒ±rla - Flutter main dosyasƒ±ndaki y√∂nlendirme sistemine uygun
      const message = {
        notification: {
          title: `üéÅ ${discountTitle}`,
          body: discountDescription,
        },
        data: {
          type: "indirim", // ‚úÖ Flutter main dosyasƒ±ndaki y√∂nlendirme sistemine uygun
          discountId: discountId,
          discountTitle: discountTitle,
          timestamp: new Date().toISOString(),
          click_action: "FLUTTER_NOTIFICATION_CLICK",
          screen: "discount_campaigns_screen"
        },
        topic: 'all_users' // T√ºm kullanƒ±cƒ±lara g√∂nder
      };
      
      // Bildirimi g√∂nder
      const result = await admin.messaging().send(message);
      
      console.log(`üì® Yeni indirim bildirimi g√∂nderildi:`, result);
      
      return result;
      
    } catch (error) {
      console.error("‚ùå Yeni indirim bildirimi g√∂nderilirken hata:", error);
      return null;
    }
  });

// üìß Bireysel veya firma bildirimi fonksiyonu - E-posta ile g√∂nderim
exports.sendIndividualNotificationTrigger = functions
  .region('europe-west1')
  .runWith({
    minInstances: 0,
    maxInstances: 3000
  })
  .firestore
  .document('individualNotifications/{notificationId}')
  .onCreate(async (snap, context) => {
    try {
      const notificationData = snap.data();
      const notificationId = context.params.notificationId;
      
      console.log(`üìß Bireysel bildirim olu≈üturuldu: ${notificationId}`, notificationData);
      
      // E-posta g√∂nderimi i√ßin SendGrid kullan
      const { sendIndividualEmail } = require('./sendGridEmail');
      
      const result = await sendIndividualEmail(
        notificationData.email,
        notificationData.title,
        notificationData.message,
        notificationData.type
      );
      
      // Dok√ºmanƒ± i≈ülenmi≈ü olarak i≈üaretle
      await snap.ref.update({
        processed: true,
        processedAt: new Date().toISOString(),
        emailResult: result
      });
      
      console.log(`üì® Bireysel bildirim g√∂nderildi:`, result);
      
      return result;
      
    } catch (error) {
      console.error("‚ùå Bireysel bildirim g√∂nderilirken hata:", error);
      
      // Hata durumunda dok√ºmanƒ± i≈üaretle
      await snap.ref.update({
        processed: true,
        processedAt: new Date().toISOString(),
        error: error.message
      });
      
      return null;
    }
  });
